class Minimize_Malware_Spread {
    int[] size;
    int[] id;
    int N;
    
    public int minMalwareSpread(int[][] graph, int[] initial) {
        N = graph.length;
        id = new int[N];
        size = new int[N];
        for (int i = 0; i < N; ++i) {
            id[i] = i;
            size[i] = 1;
        }
        for (int i = 0; i < N; ++i) {
            for (int j = i + 1; j < N; ++j) {
                if (graph[i][j] == 1) {
                    union(i, j);
                }
            }
        }
        Map<Integer, Integer> malware = new HashMap<>();
        int minIdx = N - 1, maxReduction = 0;
        for (int i : initial) {
            int r = root(i);
            malware.put(r, malware.getOrDefault(r, 0) + 1);
        }
        
        for (int i : initial) {
            int r = root(i);
            int currReduction = malware.get(r) == 1 ? size[r] : 0;
            if (currReduction > maxReduction) {
                minIdx = i;
                maxReduction = currReduction;
            }
            else if (currReduction == maxReduction) minIdx = Math.min(minIdx, i);
        }
        
        return minIdx;
    }
    
    private void union(int i, int j) {
        int p = root(i), q = root(j);
        if (size[p] < size[q]) {
            id[p] = q;
            size[q] += size[p];
        } else {
            id[q] = p;
            size[p] += size[q];
        }
    }
    
    private int root(int i) {
        while (i != id[i]) {
            id[i] = id[id[i]];
            i = id[i];
        }
        return i;
    }
}
